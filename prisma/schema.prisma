generator client {
    provider = "prisma-client-js"
    seed = "ts-node ./seed.ts"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(uuid()) // UUID como identificador único
  name      String   @unique              // Nome do tenant
  users     User[]                        // Relacionamento: Tenant pode ter muitos Users
  createdAt DateTime @default(now())      // Data de criação
  updatedAt DateTime @updatedAt           // Data de atualização automática
}

model User {
  id        String   @id @default(uuid()) // UUID como identificador único
  name      String                        // Nome do usuário
  email     String   @unique              // Email do usuário
  password  String                        // Senha (idealmente hash)
  tenantId  String                        // Chave estrangeira para Tenant (UUID)
  tenant    Tenant   @relation(fields: [tenantId], references: [id]) // Cada usuário pertence a um tenant
  roles     Role[]                        // Relacionamento: User pode ter várias Roles
  userRoles UserRole[]                   // Relacionamento: User pode ter várias UserRoles
  createdAt DateTime @default(now())      // Data de criação
  updatedAt DateTime @updatedAt           // Data de atualização automática
}

model Role {
  id        String   @id @default(uuid()) // UUID como identificador único
  code      String   @unique              // Nome da role (ex: admin, editor, viewer)
  users     User[]                        // Relacionamento: Role pode ser atribuída a muitos Users
  userRoles UserRole[]                   // Relacionamento: Role pode ter várias UserRoles
  createdAt DateTime @default(now())      // Data de criação
  updatedAt DateTime? @updatedAt          // Data de atualização automática
}

model UserRole {
  id        String   @id @default(uuid()) // UUID como identificador único
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String

  @@unique([userId, roleId]) // Garantindo que um user não pode ter a mesma role mais de uma vez
}
